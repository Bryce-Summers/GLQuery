GLQuery is a wrapper for Mr. Doob's Three.js WebGL framework.

=========================
The selector
=========================
GLQuery.select( string )
$3( string ) shortcut for the selector
supports jQuery-like name-based selecting $3( '#id' ) and class-based selecting for multiple object of a given class $3( '.class' )
supports jQuery-like function chaining, $3( string ).function1().function2()...functionN();

=========================
Selector functions (can be applied to object)
=========================
setRotation( x, y, z )
setRotation( vector ) ;where vector is an object with the fields x, y, z
setPosition( x, y, z )
setPosition( vector )
setScale( x, y, z )
setScale( vector )
scale( amount )
rotate( amount )
advance( target, amount, time )
translate( target, factor )
tween( to, time )
orbit( target, angle )
orbitVert( target, angle )
setTexture( url ) ;where URL is the link to a local file
clone() ;clones an object and places it in the same position as the original

select() ;object is surrounded by wireframe and becomes the global "selected" object
unselect()

addClass( string ) ;adds a class to the object
getName() ;returns the name of the string
setName( string ) ;sets the name of an object

Global objects:
$3( '#selected' ) ;the currently selected object
$3( '#camera' ) ;the camera
$3( '#target' ) ;the camera target

Global functions( GLQuery.function ) that take a selector as a parameter
GLQuery.getPositionVector( string )
GLQuery.getRotationVector( string )
GLQuery.getScaleVector( string )

=========================
Event binder
=========================

For keyboard events (captures the global/window keyup event):
GLQuery.keydown( key_code, function_ref );

To avoid looking up a key_code table, you may use the following enum:
Key.{string}, where {string} is one of the following:
    backspace, tab, enter, shift, ctrl, alt, pausebreak, capslock, escape, space, pageup, pagedown, end, home, leftarrow, uparrow, rightarrow, downarrow, insert, _delete, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, leftwindowkey, rightwindowkey, selectkey, numpad0, numpad1, numpad2, numpad3, numpad4, numpad5, numpad6, numpad7, numpad8, numpad9, multiply, add, subtract, decimalpoint, divide, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, numlock, scrolllock, semicolon, equalsign, comma, dash, period, forwardslash, graveaccent, openbracket, backslash, closebraket, singlequote

For mouse events (captures the mouse events performed on the 3D canvas)
$3( string ).bind( event_string, function_ref ), where event_string is one of the following:
    mouseover, mouseout, Click, Alt+Click, Ctrl+Click, Shift+Click, Alt+Ctrl+Click, Ctrl+Shift+Click, Alt+Shift+Click, Alt+Ctrl+Shift+Click, MClick, Alt+MClick, Ctrl+MClick, Shift+MClick, Alt+Ctrl+MClick, Ctrl+Shift+MClick, Alt+Shift+MClick, Alt+Ctrl+Shift+MClick, RClick, Alt+RClick, Ctrl+RClick, Shift+RClick, Alt+Ctrl+RClick, Ctrl+Shift+RClick, Alt+Shift+RClick, Alt+Ctrl+Shift+RClick, Wheel, Alt+Wheel, Ctrl+Wheel, Shift+Wheel, Alt+Ctrl+Wheel, Ctrl+Shift+Wheel, Alt+Shift+Wheel, Alt+Ctrl+Shift+Wheel, WheelUp, Alt+WheelUp, Ctrl+WheelUp, Shift+WheelUp, Alt+Ctrl+WheelUp, Ctrl+Shift+WheelUp, Alt+Shift+WheelUp, Alt+Ctrl+Shift+WheelUp, WheelDown, Alt+WheelDown, Ctrl+WheelDown, Shift+WheelDown, Alt+Ctrl+WheelDown, Ctrl+Shift+WheelDown, Alt+Shift+WheelDown, Alt+Ctrl+Shift+WheelDown, 

=========================
Loading Objects
=========================

GLQuery.loadStatic( obj ), where obj is an object with the following structure:
- geometry
- texture
- position vector ( object with x, y, z fields )
- rotation vector
- scale vector OR number ( if it is a number "n", a vector ( n, n, n ) will be created )
- static ( boolean; if set to true, the object is not selectable )

GLQuery.loadDynamic 
TODO: update to the obj model, like above

GLQuery.add( name, mesh )
- add an object to the scene, with the given name and a Three.js mesh object (mesh = geometry + texture + position/rotation/scale vectors)

=========================
Initialization
=========================
GLQuery.init( width, height, id ); where id = the id attribute of the div where the canvas will be placed


